[
  {
    "tip": "Did you know that JavaScript provides two ways to test equality.\n== (Double Equals Operator also known as the ‘abstract comparison operator’)\n=== (Triple Equals also known as the ‘Strict Comparison Operator’).\nYou can test equality with both operators, however there is a key difference.\nThe Double Equals “==“ converts the variable values to the same type before performing the comparison. This is called type coercion.\nThe Triple equals “===“ does not do any type coercion and returns true only if both values and types are identical. Where possible always use the triple equals equality operator to avoid nasty side effects!",
    "level": 1
  },
  {
    "tip": "Did you know, an assignment to an undeclared variable automatically results in a global variable being created. Remember to always use var, let or const.\nAlthough global variables may seem harmless as a beginner, they are bad practise and can result in some nasty, unexpected side effects!",
    "level": 1
  },
  {
    "tip": "Work with arrays often? Then use 'splice' instead of 'delete' to delete an item from an array. Using 'delete' replaces the item with undefined instead of the removing it from the array.",
    "level": 1
  },
  {
    "tip":   "Use a switch case when you can. Using a switch/case is faster when there are more than 2 cases, and is more readable. Avoid using it when you have more than 10 cases.",
    "level": 1
  },
  {
    "tip": "Can you invoke functions before declaration? Yes. Hoisting is a JavaScript mechanism in which variable and function declaration are moved to the top of the file before code execution. Note - this is only applicable to functions defined with the function keyword at the beginning of the declaration",
    "level": 1
  },
  {
    "tip": "Know what a pure function is? A pure function can be defined as a function that produces no side effects, nor does it rely on side effects. A pure function, when called with the same argument, will always produce the same result.",
    "level": 1
  },
  {
    "tip": "Eval = bad. The 'eval' function gives us access to JavaScript's compiler. Essentially, we can execute a string's result by passing it as a parameter of 'eval'. Not only will this decrease your script's performance substantially, but it also poses a huge security risk because it grants far too much power to the passed in text. Avoid, avoid, avoid!",
    "level": "intermediate"
  },
  {
    "tip": "Handy tip - Always place JS scripts at the bottom of the page. - This gives the HTML time to load before any JavaScript loads, which can prevent errors and speed up the website response time",
    "level": 1
  },
  {
    "tip": "Need a function to run automatically when a page loads or a parents functions is called. JavaScripts provides you with self-executing functions. Simply wrap your function in parenthesis, and then append an additional set, which essentially calls the function.",
    "level": 2
  },
  {
    "tip": "Handy Tip - Always treat numbers and booleans as primitive values and not objects. Because they not only slow down execution, but may produce some nasty side effects!",,
    "level": 2
  },
  {
    "tip": "What happens if a function is called with a missing argument? The value of the missing argument is set to undefined. To avoid this, JavaScript allows you to assign default values to arguments",
    "level": 1
  },
  {
    "tip": "Use switch cases often? Always, end your switch statements with a default case, Even if you think there is no need for it. This is good practise and makes your code robust.",
    "level": 1
  },
  {
    "tip": "Gotcha! There are a few JavaScript gotcha's you have to be aware of. Automatic type conversion is one of them. JavaScript is loosely typed, as a result a variable can contain different data types and a variable can change its data type or have it's data type changed. This is quite common in mathematical operations, in which JavaScript can convert strings into numbers.",
    "level": 1
  },
  {
    "tip":  "Declarations on top - It is good coding practise to put all your declarations at the top. Here's why: Cleaner code, provide a single place to look for local variables, reduce the possibility of unwanted re-declarations.",
    "level": 1
  },
  {
    "tip": "Template literals are your friend - Template literals make working with strings so much easier. To create a template literal simply use a backtick (`) instead of a single/double",
    "level": 1
  },
  {
    "tip": "Prefer using the Map function instead of a for loop, here's why: Immutability, you're original array will be unaffected, cleaner code, the map function has its own scope.",
    "level": 1
  }
]
  

